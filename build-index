#!/usr/bin/env node

const metalsmith = require('metalsmith');
const scoped = require('metalsmith-scoped');
const drafts = require('metalsmith-drafts');
const path = require('path');

function buildAllCardsJson(outputFilename) {
  return function plugin(files, metalsmith, callback) {
    const allFiles = {};
    function getId(file) {
      return path.posix.basename(path.posix.dirname(file.permalink));
    }
    function getVersion(file) {
      return path.posix.basename(file.permalink);
    }
    for (let [filepath, file] of Object.entries(files)) {
      const id = getId(file);
      const version = getVersion(file);
      file = {...file};
      delete file.stats;
      delete file.mode;
      file.contents = file.contents.toString();
      allFiles[id] = {...allFiles[id], [version]: file};
    }
    files[outputFilename] = {
      contents: Buffer.from(JSON.stringify(allFiles))
    }
    setImmediate(callback);
  }
}

// delete everything
function rm(files, metalsmith, callback) {
  for (let file of Object.keys(files)) {
    delete files[file]
  }
  setImmediate(callback);
}

// Crudely imitate hugo's permalinks
function hugoPermalinks(files, metalsmith, callback) {
  for (let file of Object.keys(files)) {
    const permalink = path.posix.join(
      '/',
      'cards',
      ...path.dirname(file).split(path.sep),
      path.basename(file, path.extname(file))
    );
    const dest = path.join(
      'cards',
      path.dirname(file),
      path.basename(file, path.extname(file)),
      'index.html'
    );
    files[dest] = files[file];
    delete files[file];
    files[dest].permalink = permalink;
    // console.log(`${file} -> ${permalink}`);
  }
  setImmediate(callback);
}

// log the path of every file
function logPaths(files, metalsmith, callback) {
  for (let file of Object.keys(files)) {
    console.log(file);
  }
  setImmediate(callback);
}

metalsmith(__dirname)
  .source('./content/cards')
  .destination('./static/') // TODO: move to somewhere else, for bundler to find them?
  .clean(false)
  .use(drafts())
  .use(hugoPermalinks)
  .use(buildAllCardsJson('all-cards.json'))
  .use(scoped(rm, ['**', '!all-cards.json']))
  .build(function (err) {
    if (err) throw err;
  });
