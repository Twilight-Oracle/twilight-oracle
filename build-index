#!/usr/bin/env node

const metalsmith = require('metalsmith');
const scoped = require('metalsmith-scoped');
const drafts = require('metalsmith-drafts');

const lunr = require('lunr');

function buildAllCardsJson(outputFilename) {
  return function plugin(files, metalsmith, callback) {
    const allFiles = Object.fromEntries(Object.values(files).map(file => {
      const permalink = file.permalink;
      file = {...file};
      delete file.stats;
      delete file.mode;
      delete file.permalink;
      file.contents = file.contents.toString();
      return [permalink, file];
    }));
    files[outputFilename] = {
      contents: Buffer.from(JSON.stringify(allFiles))
    }
    setImmediate(callback);
  }
}

function buildLunrIndex(outputFilename, config) {
  return function plugin(files, metalsmith, callback) {
    const index = lunr(function () {
      // TODO: lunr is really overkill for simple yes-no filtering like should
      // be done for number, ops, side, period; it may even have undesirable
      // semantics
      // TODO: how to get data on cards (name, summary...) to the client? just not prebuild the index?
      this.ref('permalink');
      this.field('title');
      this.field('number'); // TODO: will search care about numbers versus strings?
      this.field('ops'); // TODO: allow a 'none' option?
      this.field('side');
      this.field('period');
      this.field('contents'); // TODO: convert to string from Buffer, strip markdown stuff
      // TODO: search on types somehow
      // TODO: unify printed and oracle versions somehow - array of titles, other values perhaps? 'printed' field?
      for (let file of Object.keys(files)) {
        this.add(files[file]);
      }
    });
    files[outputFilename] = {
      contents: Buffer.from(JSON.stringify(index))
    };
    setImmediate(callback);
  }
}

// delete everything
function rm(files, metalsmith, callback) {
  for (let file of Object.keys(files)) {
    delete files[file]
  }
  setImmediate(callback);
}

// Crudely imitate hugo's permalinks
function hugoPermalinks(files, metalsmith, callback) {
  for (let file of Object.keys(files)) {
    const permalink = '/cards/' + file.replace(/.md$/, '');
    const dest = permalink + '/index.html';
    files[dest] = files[file];
    delete files[file];
    files[dest].permalink = permalink;
    console.log(`${file} -> ${permalink}`);
  }
  setImmediate(callback);
}

// log the path of every file
function logPaths(files, metalsmith, callback) {
  for (let file of Object.keys(files)) {
    console.log(file);
  }
  setImmediate(callback);
}

// metalsmith-default-values does this, but a little heavier-weight than we need
function setDefault(key, value) {
  return function setDefault(files, metalsmith, callback) {
    for (let file of Object.keys(files)) {
      if (!files[file].hasOwnProperty(key)) {
        files[file][key] = value;
      }
    }
    setImmediate(callback);
  }
}

metalsmith(__dirname)
  .source('./content/cards')
  .destination('./static/') // TODO: move to somewhere else, for bundler to find them?
  .clean(false)
  .use(drafts())
  .use(hugoPermalinks)
  .use(setDefault('side', 'Neutral'))
  .use(buildAllCardsJson('all-cards.json'))
  .use(scoped(
    buildLunrIndex('lunr-index.json'),
    ['**', 'lunr-index.json', '!all-cards.json']
  ))
  .use(scoped(rm, ['**', '!lunr-index.json', '!all-cards.json']))
  .build(function (err) {
    if (err) throw err;
  });
